DROP TABLE user_roles IF EXISTS;
DROP TABLE lunch_menu_items IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP TABLE users IF EXISTS;

CREATE TABLE users
(
    id               INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, increment by 1) PRIMARY KEY,
    name             VARCHAR(255)            NOT NULL,
    email            VARCHAR(255)            NOT NULL,
    password         VARCHAR(255)            NOT NULL,
    registered       TIMESTAMP DEFAULT now() NOT NULL,
    enabled          BOOLEAN   DEFAULT TRUE  NOT NULL,
    calories_per_day INTEGER   DEFAULT 2000  NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx
    ON USERS (email);

CREATE TABLE user_roles
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255),
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    CONSTRAINT fk_user_roles_users FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, increment by 1) PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX restaurants_unique_name_idx
    ON RESTAURANTS (name);

CREATE TABLE lunch_menu_items
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, increment by 1) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    restaurant_id INTEGER NOT NULL,
    menu_date DATE NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    CONSTRAINT fk_lunch_menu_items_restaurants FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX lunch_menu_items_unique_idx
    ON lunch_menu_items (restaurant_id, menu_date, name);

CREATE TABLE votes
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, increment by 1) PRIMARY KEY,
    user_id INTEGER NOT NULL,
    date_time TIMESTAMP NOT NULL,
    vote_date DATE GENERATED ALWAYS AS ( CAST(date_time as DATE) ),
    restaurant_id INTEGER NOT NULL,
    CONSTRAINT fk_votes_users FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE,
    CONSTRAINT fk_votes_restaurants FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX votes_unique_user_date_idx
    ON votes (user_id, vote_date);
